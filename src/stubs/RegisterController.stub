<?php

namespace App\Http\Controllers\Auth;

use App\User;
use App\DataAkademik;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Illuminate\Foundation\Auth\RegistersUsers;
use Illuminate\Auth\Events\Registered;

class RegisterController extends Controller
{
    use RegistersUsers;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest');
    }

    /**
     * The user has been registered.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  mixed  $user
     * @return mixed
     */
    protected function registered(Request $request, $user)
    {
        return $user;
    }

    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {


            return Validator::make($data, [
                'name' => 'required|digits_between:5,20|unique:users,name',
                'nomor_kk'  => 'required|digits_between:5,20',
                'tgl_lahir' => 'string|max:6',
                'password' => 'required|min:6|confirmed',
            ]);


    }

    /**
     * Handle a registration request for the application.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function register(Request $request)
    {

        if(env('CHECK_NOMOR_UN')){

            $check_nomor_un     = \App\DataAkademik::where('nomor_un', request()->name);
            $check_nomor_kk     = substr($request->nomor_kk, 0, 2);
            $kode_provinsi      = 36;

            $tgl = substr($check_nomor_un->first()->tanggal_lahir, 8, 2);
            $bln = substr($check_nomor_un->first()->tanggal_lahir, 5, 2);
            $thn = substr($check_nomor_un->first()->tanggal_lahir, 2, 2);

            $tgl_lahir = $tgl.$bln.$thn;
            $tgl_lahir_from_input = trim(str_replace('-','',$request->tgl_lahir));

            if($tgl_lahir_from_input != $tgl_lahir){
                return response()->json(['nomor_un'=>'Mohon maaf tanggal lahir anda tidak sesuai dengan data di database kami.']);
            }

            if($check_nomor_un->count() <= 0){
                return response()->json(['nomor_un'=>'Nomor UN : '.request()->name.' tidak ditemukan']);
            }

            if($check_nomor_kk != $kode_provinsi){
                return response()->json(['nomor_un'=>'Pendaftaran online khusus untuk calon siswa dengan kartu keluarga yang berdomisili di provinsi banten.']);
            }

            if($check_nomor_kk != $kode_provinsi){
                return response()->json(['nomor_un'=>'Pendaftaran online khusus untuk calon siswa dengan kartu keluarga yang berdomisili di provinsi banten.']);
            }

        }

        $this->validator($request->all())->validate();

        event(new Registered($user = $this->create($request->all())));

        $this->guard()->login($user);

        return $this->registered($request, $user)
                        ?: redirect($this->redirectPath());
    }

    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return User
     */
    protected function create(array $data)
    {

            $user = User::create([
                'name' => $data['name'],
                'tgl_lahir' => $data['tgl_lahir'],
                'password' => bcrypt($data['password']),
            ]);

            DataAkademik::where('nomor_un', $user->name)
                ->update(['nomor_kk' => $data['nomor_kk']]);

            return $user->attachRole(env('DEFAULT_USER_ROLE'));
    }
}
